#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ArduinoJson.h>
#include <DHT.h>
#include <DHT_U.h>

// ===== CONFIG WIFI =====
const char* ssid = "JOEL";
const char* password = "carbajal25";

// ===== SERVIDOR WEB =====
ESP8266WebServer server(80);

// ===== CONFIG SENSORES =====
#define DHTPIN 2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

int sensorPin = A0;
int relayPin = 5;      // D1 = GPIO5
int modoPin = 4;       // Bot√≥n cambio de modo
int manualPin = 14;    // Bot√≥n encendido manual

// ===== VARIABLES RIEGO =====
int threshold = 40; // Humedad m√≠nima para regar
bool modoAutomatico = true;
bool bombaEncendida = false;
bool enEspera = false;

unsigned long tiempoRiego = 10000;  // 10s
unsigned long tiempoEspera = 20000; // 20s
unsigned long ultimaActivacionBomba = 0;

// ===== VARIABLES SENSORES =====
float temperatura = 0.0;
float humedadAmbiental = 0.0;
int humedadSuelo = 0;
unsigned long ultimaLecturaSensores = 0;
const unsigned long intervaloLectura = 2000; // 2 segundos

// ===== BOTONES DEBOUNCE =====
unsigned long lastButtonModoDebounce = 0;
unsigned long lastButtonManualDebounce = 0;
const unsigned long debounceDelay = 50;

bool lastModoButtonState = HIGH;
bool lastManualButtonState = HIGH;

void debugPrint(String message) {
  Serial.print("[DEBUG] ");
  Serial.println(message);
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  debugPrint("Iniciando Sistema de Riego Web...");

  pinMode(sensorPin, INPUT);
  pinMode(relayPin, OUTPUT);
  pinMode(modoPin, INPUT_PULLUP);
  pinMode(manualPin, INPUT_PULLUP);

  digitalWrite(relayPin, HIGH); // Bomba apagada (relay invertido)
  dht.begin();

  // Conectar WiFi
  Serial.println("Conectando a WiFi...");
  WiFi.begin(ssid, password);
  
  int intentos = 0;
  while (WiFi.status() != WL_CONNECTED && intentos < 30) {
    delay(500);
    Serial.print(".");
    intentos++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ Conectado a WiFi");
    Serial.print("üåç IP del ESP8266: ");
    Serial.println(WiFi.localIP());
    Serial.println("==========================================");
    Serial.print("üåê Accede desde tu navegador: http://");
    Serial.println(WiFi.localIP());
    Serial.println("üì± Usa esta IP en tu p√°gina HTML");
    Serial.println("==========================================");
  } else {
    Serial.println("\n‚ùå Error: No se pudo conectar al WiFi");
    return;
  }

  // Configurar rutas del servidor web
  setupWebServer();
  
  // Iniciar servidor web
  server.begin();
  debugPrint("üåê Servidor web iniciado en puerto 80");
}

void setupWebServer() {
  // API endpoints con CORS
  server.on("/api/datos", HTTP_GET, handleGetDatos);
  server.on("/api/datos", HTTP_OPTIONS, handleOptions);
  
  server.on("/api/bomba", HTTP_POST, handleBomba);
  server.on("/api/bomba", HTTP_OPTIONS, handleOptions);
  
  server.on("/api/config", HTTP_POST, handleConfig);
  server.on("/api/config", HTTP_OPTIONS, handleOptions);
  
  // P√°gina de informaci√≥n eliminada (handleRoot)
  server.onNotFound(handleNotFound);
}

void leerSensores() {
  unsigned long tiempoActual = millis();
  
  if (tiempoActual - ultimaLecturaSensores >= intervaloLectura) {
    ultimaLecturaSensores = tiempoActual;
    
    // Leer DHT11
    humedadAmbiental = dht.readHumidity();
    temperatura = dht.readTemperature();
    
    // Leer sensor de humedad del suelo
    int raw = analogRead(sensorPin);
    humedadSuelo = map(raw, 0, 1023, 100, 0);
    
    // Debug cada 5 lecturas
    static int contador = 0;
    if (contador++ % 5 == 0) {
      if (isnan(humedadAmbiental) || isnan(temperatura)) {
        debugPrint("‚ö†Ô∏è Error leyendo DHT11");
      } else {
        Serial.printf("üìä T:%.1f¬∞C | H.Amb:%.1f%% | H.Suelo:%d%% | Bomba:%s\n", 
                     temperatura, humedadAmbiental, humedadSuelo, bombaEncendida ? "ON" : "OFF");
      }
    }
  }
}

void controlarBomba(int humedad) {
  if (!modoAutomatico) return; // Solo funciona en modo autom√°tico
  
  unsigned long tiempoActual = millis();

  // Si est√° en espera
  if (enEspera) {
    if (tiempoActual - ultimaActivacionBomba >= tiempoEspera) {
      enEspera = false;
      debugPrint("‚è∞ Per√≠odo de espera finalizado");
    }
    return;
  }

  // Encender bomba si humedad es baja
  if (humedad < threshold && !bombaEncendida && !enEspera) {
    digitalWrite(relayPin, LOW); // Relay activado (invertido)
    bombaEncendida = true;
    ultimaActivacionBomba = tiempoActual;
    debugPrint("ü§ñ Autom√°tico: BOMBA ENCENDIDA - Humedad: " + String(humedad) + "%");
  }

  // Apagar bomba despu√©s del tiempo de riego
  if (bombaEncendida && (tiempoActual - ultimaActivacionBomba >= tiempoRiego)) {
    digitalWrite(relayPin, HIGH); // Relay desactivado
    bombaEncendida = false;
    enEspera = true;
    ultimaActivacionBomba = tiempoActual;
    debugPrint("ü§ñ Autom√°tico: BOMBA APAGADA - Iniciando espera");
  }
}

// ===== WEB SERVER HANDLERS =====

void handleOptions() {
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With");
  server.sendHeader("Access-Control-Max-Age", "86400");
  server.send(200, "text/plain", "OK");
}

void handleGetDatos() {
  DynamicJsonDocument doc(1024);
  
  // Datos principales para la web
  doc["humedad"] = humedadSuelo;           
  doc["temperatura"] = temperatura;
  doc["humedadAmbiental"] = humedadAmbiental;
  doc["bomba"] = bombaEncendida;
  doc["humedadMinima"] = threshold;
  doc["automatico"] = modoAutomatico;
  doc["ip"] = WiFi.localIP().toString();
  doc["timestamp"] = millis();
  
  // Informaci√≥n adicional
  doc["enEspera"] = enEspera;
  doc["tiempoEsperaRestante"] = enEspera ? (tiempoEspera - (millis() - ultimaActivacionBomba)) / 1000 : 0;
  doc["ultimoRiego"] = (millis() - ultimaActivacionBomba) / 1000;
  
  String response;
  serializeJson(doc, response);
  
  // Headers CORS
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.sendHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  server.sendHeader("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With");
  server.sendHeader("Content-Type", "application/json");
  
  server.send(200, "application/json", response);
}

void handleBomba() {
  if (!server.hasArg("plain")) {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(400, "application/json", "{\"error\":\"No data received\"}");
    return;
  }
  
  DynamicJsonDocument doc(512);
  DeserializationError error = deserializeJson(doc, server.arg("plain"));
  
  if (error) {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(400, "application/json", "{\"error\":\"Invalid JSON\"}");
    return;
  }
  
  bool nuevoEstado = doc["estado"];
  
  if (nuevoEstado) {
    modoAutomatico = false;
    digitalWrite(relayPin, LOW);  
    bombaEncendida = true;
    enEspera = false;
  } else {
    digitalWrite(relayPin, HIGH); 
    bombaEncendida = false;
    enEspera = false;
  }
  
  DynamicJsonDocument respuesta(256);
  respuesta["success"] = true;
  respuesta["bomba"] = bombaEncendida;
  respuesta["modo"] = modoAutomatico ? "automatico" : "manual";
  
  String jsonResponse;
  serializeJson(respuesta, jsonResponse);
  
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "application/json", jsonResponse);
}

void handleConfig() {
  if (!server.hasArg("plain")) {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(400, "application/json", "{\"error\":\"No data received\"}");
    return;
  }
  
  DynamicJsonDocument doc(512);
  DeserializationError error = deserializeJson(doc, server.arg("plain"));
  
  if (error) {
    server.sendHeader("Access-Control-Allow-Origin", "*");
    server.send(400, "application/json", "{\"error\":\"Invalid JSON\"}");
    return;
  }
  
  if (doc.containsKey("humedadMinima")) {
    int nuevaHumedad = doc["humedadMinima"];
    if (nuevaHumedad >= 0 && nuevaHumedad <= 100) {
      threshold = nuevaHumedad;
    }
  }
  
  if (doc.containsKey("automatico")) {
    bool nuevoModo = doc["automatico"];
    if (nuevoModo != modoAutomatico) {
      modoAutomatico = nuevoModo;
      if (modoAutomatico) {
        enEspera = false;
      } else {
        digitalWrite(relayPin, HIGH);
        bombaEncendida = false;
      }
    }
  }
  
  DynamicJsonDocument respuesta(256);
  respuesta["success"] = true;
  respuesta["humedadMinima"] = threshold;
  respuesta["automatico"] = modoAutomatico;
  
  String jsonResponse;
  serializeJson(respuesta, jsonResponse);
  
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "application/json", jsonResponse);
}

void handleNotFound() {
  String mensaje = "Endpoint no encontrado\n\n";
  mensaje += "URI: " + server.uri() + "\n";
  mensaje += "M√©todo: ";
  mensaje += (server.method() == HTTP_GET) ? "GET" : "POST";
  mensaje += "\n";
  
  server.send(404, "text/plain", mensaje);
}

void loop() {
  server.handleClient();
  leerSensores();
  
  bool modoButtonState = digitalRead(modoPin);
  if (modoButtonState != lastModoButtonState) lastButtonModoDebounce = millis();
  if ((millis() - lastButtonModoDebounce) > debounceDelay) {
    if (modoButtonState == LOW) {
      modoAutomatico = !modoAutomatico;
      digitalWrite(relayPin, HIGH);
      bombaEncendida = false;
      enEspera = false;
    }
  }
  lastModoButtonState = modoButtonState;

  if (!modoAutomatico) {
    bool manualButtonState = digitalRead(manualPin);
    if (manualButtonState != lastManualButtonState) lastButtonManualDebounce = millis();
    if ((millis() - lastButtonManualDebounce) > debounceDelay) {
      if (manualButtonState == LOW) {
        digitalWrite(relayPin, LOW);
        bombaEncendida = true;
      } else {
        digitalWrite(relayPin, HIGH);
        bombaEncendida = false;
      }
    }
    lastManualButtonState = manualButtonState;
  } else {
    controlarBomba(humedadSuelo);
  }

  delay(100);
}

Dashboard
***************************
// src/components/Tabs/Dashboard.jsx
import React, { useContext } from 'react';
import { AppContext } from '../../context/AppContext';

const Dashboard = () => {
  const {
    datos,
    connected,
    espIP,
    setEspIP,
    espPort,
    setEspPort,
    handleConnect,
    desconectarESP,
  } = useContext(AppContext);

  let sueloBarColor = '#2ecc71';
  if (datos.humedad !== undefined) {
    if (datos.humedad < 30) {
      sueloBarColor = '#e74c3c';
    } else if (datos.humedad < 60) {
      sueloBarColor = '#f39c12';
    }
  }

  return (
    <div className="tab-content">
      <div className="control-section">
        <h3>Conexi√≥n ESP8266</h3>
        <div className="control-grid">
          <div className="control-group">
            <div className="form-group">
              <label className="form-label">IP del ESP8266:</label>
              <input
                type="text"
                className="form-input"
                value={espIP}
                onChange={(e) => setEspIP(e.target.value)}
                placeholder="192.168.1.100"
              />
            </div>
            <div className="form-group">
              <label className="form-label">Puerto:</label>
              <input
                type="text"
                className="form-input"
                value={espPort}
                onChange={(e) => setEspPort(e.target.value)}
                placeholder="80"
              />
            </div>
            <button className="btn success" onClick={handleConnect}>
              Conectar
            </button>
            <button className="btn danger" onClick={desconectarESP}>
              Desconectar
            </button>
          </div>
        </div>
      </div>

      <div className="metrics-grid">
        <div className="metric-card card-temperature">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">üå°Ô∏è</span>
              Temperatura
            </div>
          </div>
          <div className="metric-value">
            {datos.temperatura !== undefined && !isNaN(datos.temperatura)
              ? datos.temperatura.toFixed(1) + '¬∞C'
              : '--'}
          </div>
          <div className="metric-unit">Grados Celsius</div>
          <div className="metric-bar">
            <div
              className="metric-bar-fill"
              style={{
                width: datos.temperatura !== undefined ? Math.min(100, Math.max(0, (datos.temperatura / 50) * 100)) + '%' : '0%',
                background: '#e67e22',
              }}
            ></div>
          </div>
        </div>

        <div className="metric-card card-humidity-env">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">üí®</span>
              Humedad Ambiental
            </div>
          </div>
          <div className="metric-value">
            {datos.humedadAmbiental !== undefined && !isNaN(datos.humedadAmbiental)
              ? datos.humedadAmbiental.toFixed(1) + '%'
              : '--'}
          </div>
          <div className="metric-unit">Porcentaje (%)</div>
          <div className="metric-bar">
            <div
              className="metric-bar-fill"
              style={{
                width: datos.humedadAmbiental !== undefined ? datos.humedadAmbiental + '%' : '0%',
                background: '#3498db',
              }}
            ></div>
          </div>
        </div>

        <div className="metric-card card-humidity-soil">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">üå±</span>
              Humedad del Suelo
            </div>
          </div>
          <div className="metric-value">
            {datos.humedad !== undefined ? datos.humedad + '%' : '--'}
          </div>
          <div className="metric-unit">Porcentaje (%)</div>
          <div className="metric-bar">
            <div
              className="metric-bar-fill"
              style={{
                width: datos.humedad !== undefined ? datos.humedad + '%' : '0%',
                background: sueloBarColor,
              }}
            ></div>
          </div>
        </div>

        <div className="metric-card card-pump">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">‚ö°</span>
              Bomba de Agua
            </div>
          </div>
          <div>
            <div className={`status-indicator ${datos.bomba ? 'status-on' : 'status-off'}`}>
              <div className="status-dot"></div>
              {datos.bomba ? 'ENCENDIDA' : 'APAGADA'}
            </div>
          </div>
          <div className="metric-unit">Estado actual</div>
        </div>

        <div className="metric-card card-mode">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">ü§ñ</span>
              Modo Autom√°tico
            </div>
          </div>
          <div>
            <div className={`status-indicator ${datos.automatico ? 'status-on' : 'status-off'}`}>
              <div className="status-dot"></div>
              {datos.automatico ? 'ACTIVADO' : 'DESACTIVADO'}
            </div>
          </div>
          <div className="metric-unit">Control autom√°tico</div>
        </div>

        <div className="metric-card card-system">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">üì°</span>
              Sistema
            </div>
          </div>
          <div>
            <div className={`status-indicator ${connected ? 'status-on' : 'status-off'}`}>
              <div className="status-dot"></div>
              {connected ? 'CONECTADO' : 'DESCONECTADO'}
            </div>
          </div>
          <div className="metric-unit">√öltima actualizaci√≥n: {new Date().toLocaleTimeString()}</div>
        </div>
      </div>

      <div className="control-section">
        <h3>Informaci√≥n Detallada</h3>
        <div className="system-info">
          <div className="info-item">
            <span className="info-label">Umbral de Humedad:</span>
            <span className="info-value">{datos.humedadMinima || '--'} %</span>
          </div>
          <div className="info-item">
            <span className="info-label">Estado de Espera:</span>
            <span className="info-value">{datos.enEspera ? 'S√ç' : 'NO'}</span>
          </div>
          <div className="info-item">
            <span className="info-label">Tiempo Restante:</span>
            <span className="info-value">{datos.tiempoEsperaRestante || 0} s</span>
          </div>
          <div className="info-item">
            <span className="info-label">√öltimo Riego:</span>
            <span className="info-value">{datos.ultimoRiego || '--'} s</span>
          </div>
          <div className="info-item">
            <span className="info-label">IP del ESP8266:</span>
            <span className="info-value">{espIP || '--'}</span>
          </div>
          <div className="info-item">
            <span className="info-label">Timestamp:</span>
            <span className="info-value">{datos.timestamp || '--'}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;

Control*****************
// src/components/Tabs/Control.jsx
import React, { useState, useContext } from 'react';
import { AppContext } from '../../context/AppContext';

const ControlTab = () => {
    const { controlarBomba, cambiarModo, actualizarUmbral } = useContext(AppContext);
    const [modoAutomatico, setModoAutomatico] = useState('false');
    const [umbralHumedad, setUmbralHumedad] = useState(40);

    return (
        <div className="tab-content">
            <h2>Panel de Control</h2>
            <div className="control-section">
                <div className="control-grid">
                    <div className="control-group">
                        <div className="control-title">
                            <span>‚ö°</span>
                            Control Manual de Bomba
                        </div>
                        <button onClick={() => controlarBomba(true)}>üü¢ Encender Bomba</button>
                        <button onClick={() => controlarBomba(false)}>üî¥ Apagar Bomba</button>

                    </div>

                    <div className="control-group">
                        <div className="control-title">
                            <span>ü§ñ</span>
                            Modo de Operaci√≥n
                        </div>
                        <div className="form-group">
                            <label className="form-label">Modo Autom√°tico:</label>
                            <select
                                className="form-input"
                                value={modoAutomatico}
                                onChange={(e) => setModoAutomatico(e.target.value)}
                            >
                                <option value="true">Activado</option>
                                <option value="false">Desactivado</option>
                            </select>
                        </div>
                        <button className="btn" onClick={() => cambiarModo(modoAutomatico === 'true')}>
                            <span>üîÑ</span> Cambiar Modo
                        </button>
                    </div>

                    <div className="control-group">
                        <div className="control-title">
                            <span>‚öôÔ∏è</span>
                            Configuraci√≥n de Riego
                        </div>
                        <div className="form-group">
                            <label className="form-label">Humedad M√≠nima (%):</label>
                            <input
                                type="number"
                                className="form-input"
                                min="0"
                                max="100"
                                value={umbralHumedad}
                                onChange={(e) => setUmbralHumedad(e.target.value)}
                            />
                        </div>
                        <button className="btn warning" onClick={() => actualizarUmbral(umbralHumedad)}>
                            <span>üíæ</span> Guardar Umbral
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ControlTab;

CONFIGURACION*********************

// src/components/Tabs/Configuracion.jsx
import React, { useState, useContext } from 'react';
import { AppContext } from '../../context/AppContext';

const Configuracion = () => {
  const { actualizarIntervalo, limpiarHistorial, exportarDatos } = useContext(AppContext);
  const [intervalo, setIntervalo] = useState(2);

  return (
    <div className="tab-content">
      <h2>Configuraci√≥n del Sistema</h2>
      <div className="control-section">
        <div className="control-grid">
          <div className="control-group">
            <div className="control-title">
              <span>üîß</span>
              Configuraci√≥n de Actualizaci√≥n
            </div>
            <div className="form-group">
              <label className="form-label">Intervalo de actualizaci√≥n (segundos):</label>
              <input
                type="number"
                className="form-input"
                min="1"
                max="60"
                value={intervalo}
                onChange={(e) => setIntervalo(e.target.value)}
              />
            </div>
            <button className="btn" onClick={() => actualizarIntervalo(intervalo)}>
              <span>‚è±Ô∏è</span> Aplicar Intervalo
            </button>
          </div>

          <div className="control-group">
            <div className="control-title">
              <span>üìä</span>
              Configuraci√≥n de Datos
            </div>
            <button className="btn warning" onClick={limpiarHistorial}>
              <span>üóëÔ∏è</span> Limpiar Historial
            </button>
            <button className="btn" onClick={exportarDatos}>
              <span>üì•</span> Exportar Datos
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Configuracion;
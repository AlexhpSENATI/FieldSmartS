// src/components/Tabs/Dashboard.jsx
import React, { useContext } from 'react';
import { AppContext } from '../../context/AppContext';

const Dashboard = () => {
  const {
    datos,
    connected,
    espIP,
    setEspIP,
    espPort,
    setEspPort,
    handleConnect,
    desconectarESP,
  } = useContext(AppContext);

  let sueloBarColor = '#2ecc71';
  if (datos.humedad !== undefined) {
    if (datos.humedad < 30) {
      sueloBarColor = '#e74c3c';
    } else if (datos.humedad < 60) {
      sueloBarColor = '#f39c12';
    }
  }

  return (
    <div className="tab-content">
      <div className="control-section">
        <h3>Conexi√≥n ESP8266</h3>
        <div className="control-grid">
          <div className="control-group">
            <div className="form-group">
              <label className="form-label">IP del ESP8266:</label>
              <input
                type="text"
                className="form-input"
                value={espIP}
                onChange={(e) => setEspIP(e.target.value)}
                placeholder="192.168.1.100"
              />
            </div>
            <div className="form-group">
              <label className="form-label">Puerto:</label>
              <input
                type="text"
                className="form-input"
                value={espPort}
                onChange={(e) => setEspPort(e.target.value)}
                placeholder="80"
              />
            </div>
            <button className="btn success" onClick={handleConnect}>
              Conectar
            </button>
            <button className="btn danger" onClick={desconectarESP}>
              Desconectar
            </button>
          </div>
        </div>
      </div>

      <div className="metrics-grid">
        <div className="metric-card card-temperature">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">üå°Ô∏è</span>
              Temperatura
            </div>
          </div>
          <div className="thermometer-container">
            <div className="thermometer">
              <div className="thermometer-bulb">
                <div className="thermometer-liquid" style={{ height: datos.temperatura !== undefined ? `${Math.min(100, (datos.temperatura / 50) * 100)}%` : '0%' }}></div>
              </div>
              <div className="thermometer-tube">
                <div className="thermometer-liquid" style={{ height: datos.temperatura !== undefined ? `${Math.min(100, (datos.temperatura / 50) * 100)}%` : '0%' }}></div>
              </div>
            </div>
          </div>
          <div className="metric-value">
            {datos.temperatura !== undefined && !isNaN(datos.temperatura)
              ? datos.temperatura.toFixed(1) + '¬∞C'
              : '--'}
          </div>
          <div className="metric-unit">Grados Celsius</div>
        </div>

        <div className="metric-card card-humidity-env">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">üí®</span>
              Humedad Ambiental
            </div>
          </div>
          <div className="cloud-container">
            <div className="cloud">
              <div className="cloud-shape"></div>
              {[...Array(5)].map((_, i) => (
                <div 
                  key={i} 
                  className={`raindrop ${datos.humedadAmbiental > i*20 ? 'active' : ''}`}
                  style={{ animationDelay: `${i * 0.3}s` }}
                ></div>
              ))}
            </div>
          </div>
          <div className="metric-value">
            {datos.humedadAmbiental !== undefined && !isNaN(datos.humedadAmbiental)
              ? datos.humedadAmbiental.toFixed(1) + '%'
              : '--'}
          </div>
          <div className="metric-unit">Porcentaje (%)</div>
        </div>

        <div className="metric-card card-humidity-soil">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">üå±</span>
              Humedad del Suelo
            </div>
          </div>
          <div className="bubbles-container">
            {[...Array(6)].map((_, i) => (
              <div 
                key={i} 
                className={`bubble ${datos.humedad > i*15 ? 'active' : ''}`}
                style={{ 
                  animationDelay: `${i * 0.5}s`,
                  left: `${10 + i * 15}%`
                }}
              ></div>
            ))}
          </div>
          <div className="metric-value">
            {datos.humedad !== undefined ? datos.humedad + '%' : '--'}
          </div>
          <div className="metric-unit">Porcentaje (%)</div>
          <div className="progress-bar-container">
            <div className="progress-bar">
              <div 
                className="progress-fill" 
                style={{ 
                  width: datos.humedad !== undefined ? `${datos.humedad}%` : '0%',
                  backgroundColor: sueloBarColor
                }}
              ></div>
            </div>
          </div>
        </div>

        <div className="metric-card card-pump">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">‚ö°</span>
              Bomba de Agua
            </div>
          </div>
          <div className="pump-animation">
            <div className={`water-flow ${datos.bomba ? 'active' : ''}`}></div>
            <div className="pump-icon">üíß</div>
          </div>
          <div>
            <div className={`status-indicator ${datos.bomba ? 'status-on' : 'status-off'}`}>
              <div className="status-dot"></div>
              {datos.bomba ? 'ENCENDIDA' : 'APAGADA'}
            </div>
          </div>
          <div className="metric-unit">Estado actual</div>
        </div>

        <div className="metric-card card-mode">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">ü§ñ</span>
              Modo Autom√°tico
            </div>
          </div>
          <div className="automation-icon">
            <div className={`gear ${datos.automatico ? 'spinning' : ''}`}>‚öôÔ∏è</div>
          </div>
          <div>
            <div className={`status-indicator ${datos.automatico ? 'status-on' : 'status-off'}`}>
              <div className="status-dot"></div>
              {datos.automatico ? 'ACTIVADO' : 'DESACTIVADO'}
            </div>
          </div>
          <div className="metric-unit">Control autom√°tico</div>
        </div>

        <div className="metric-card card-system">
          <div className="card-header">
            <div className="card-title">
              <span className="card-icon">üì°</span>
              Sistema
            </div>
          </div>
          <div className="signal-animation">
            <div className={`signal ${connected ? 'active' : ''}`}>
              <span></span>
              <span></span>
              <span></span>
            </div>
          </div>
          <div>
            <div className={`status-indicator ${connected ? 'status-on' : 'status-off'}`}>
              <div className="status-dot"></div>
              {connected ? 'CONECTADO' : 'DESCONECTADO'}
            </div>
          </div>
          <div className="metric-unit">√öltima actualizaci√≥n: {new Date().toLocaleTimeString()}</div>
        </div>
      </div>

      <div className="control-section">
        <h3>Informaci√≥n Detallada</h3>
        <div className="system-info">
          <div className="info-item">
            <span className="info-label">Umbral de Humedad:</span>
            <span className="info-value">{datos.humedadMinima || '--'} %</span>
          </div>
          <div className="info-item">
            <span className="info-label">Estado de Espera:</span>
            <span className="info-value">{datos.enEspera ? 'S√ç' : 'NO'}</span>
          </div>
          <div className="info-item">
            <span className="info-label">Tiempo Restante:</span>
            <span className="info-value">{datos.tiempoEsperaRestante || 0} s</span>
          </div>
          <div className="info-item">
            <span className="info-label">√öltimo Riego:</span>
            <span className="info-value">{datos.ultimoRiego || '--'} s</span>
          </div>
          <div className="info-item">
            <span className="info-label">IP del ESP8266:</span>
            <span className="info-value">{espIP || '--'}</span>
          </div>
          <div className="info-item">
            <span className="info-label">Timestamp:</span>
            <span className="info-value">{datos.timestamp || '--'}</span>
          </div>
        </div>
      </div>

      <style jsx>{`
        .metrics-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 20px;
          margin-bottom: 30px;
        }
        
        .metric-card {
          background: white;
          border-radius: 12px;
          padding: 20px;
          box-shadow: 0 4px 15px rgba(202, 8, 8, 0.1);
          transition: transform 0.3s ease, box-shadow 0.3s ease;
          display: flex;
          flex-direction: column;
          align-items: center;
          text-align: center;
        }
        
        .metric-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 8px 25px rgba(8, 93, 221, 0.96);
        }
        
        .card-header {
          margin-bottom: 15px;
          width: 100%;
        }
        
        .card-title {
          font-size: 18px;
          font-weight: 600;
          color: #2c3e50;
          display: flex;
          align-items: center;
          justify-content: center;
          gap: 8px;
        }
        
        .card-icon {
          font-size: 24px;
        }
        
        .metric-value {
          font-size: 32px;
          font-weight: 700;
          color: #2c3e50;
          margin: 10px 0;
        }
        
        .metric-unit {
          font-size: 14px;
          color: #7f8c8d;
          margin-bottom: 15px;
        }
        
        /* Term√≥metro */
        .thermometer-container {
          width: 100%;
          display: flex;
          justify-content: center;
          margin: 15px 0;
        }
        
        .thermometer {
          position: relative;
          height: 150px;
          width: 40px;
        }
        
        .thermometer-bulb {
          position: absolute;
          bottom: 0;
          width: 40px;
          height: 40px;
          border-radius: 50%;
          background: #ecf0f1;
          border: 2px solid #bdc3c7;
        }
        
        .thermometer-tube {
          position: absolute;
          bottom: 20px;
          left: 9px;
          width: 22px;
          height: 130px;
          border-radius: 11px;
          background: #ecf0f1;
          border: 2px solid #bdc3c7;
          overflow: hidden;
        }
        
        .thermometer-liquid {
          position: absolute;
          bottom: 0;
          width: 100%;
          background: linear-gradient(to top, #ec0606ff, #db3434ff, #ff9900ff);
          transition: height 1s ease;
          border-radius: 10px;
        }
        
        /* Nube y gotas */
        .cloud-container {
          position: relative;
          height: 120px;
          width: 100%;
          display: flex;
          justify-content: center;
          align-items: center;
          margin: 15px 0;
        }
        
        .cloud {
          position: relative;
          width: 100px;
          height: 60px;
        }
        
        .cloud-shape {
          position: absolute;
          width: 100px;
          height: 40px;
          background: #ecf0f1;
          border-radius: 50px;
          box-shadow: 0 0 20px #bdc3c7;
        }
        
        .cloud-shape:before {
          content: '';
          position: absolute;
          top: -20px;
          left: 15px;
          width: 40px;
          height: 40px;
          background: #ecf0f1;
          border-radius: 50%;
        }
        
        .cloud-shape:after {
          content: '';
          position: absolute;
          top: -15px;
          right: 15px;
          width: 35px;
          height: 35px;
          background: #ecf0f1;
          border-radius: 50%;
        }
        
        .raindrop {
          position: absolute;
          width: 6px;
          height: 12px;
          background: #3498db;
          border-radius: 0 0 8px 8px;
          opacity: 0;
          top: 40px;
          transform: translateY(0);
        }
        
        .raindrop:nth-child(1) { left: 25px; }
        .raindrop:nth-child(2) { left: 40px; }
        .raindrop:nth-child(3) { left: 55px; }
        .raindrop:nth-child(4) { left: 70px; }
        .raindrop:nth-child(5) { left: 85px; }
        
        .raindrop.active {
          opacity: 1;
          animation: rain 1.5s infinite;
        }
        
        @keyframes rain {
          0% { transform: translateY(0); opacity: 1; }
          80% { transform: translateY(40px); opacity: 0.8; }
          100% { transform: translateY(50px); opacity: 0; }
        }
        
        /* Burbujas */
        .bubbles-container {
          position: relative;
          height: 100px;
          width: 100%;
          margin: 15px 0;
        }
        
        .bubble {
          position: absolute;
          bottom: 0;
          width: 20px;
          height: 20px;
          background: rgba(52, 152, 219, 0.6);
          border-radius: 50%;
          opacity: 0;
        }
        
        .bubble.active {
          opacity: 1;
          animation: bubble-rise 2s infinite;
        }
        
        @keyframes bubble-rise {
          0% { transform: translateY(0) scale(1); opacity: 0.6; }
          50% { transform: translateY(-40px) scale(1.2); opacity: 0.8; }
          100% { transform: translateY(-80px) scale(1.5); opacity: 0; }
        }
        
        /* Barra de progreso */
        .progress-bar-container {
          width: 100%;
          margin-top: 10px;
        }
        
        .progress-bar {
          width: 100%;
          height: 10px;
          background: #ecf0f1;
          border-radius: 5px;
          overflow: hidden;
        }
        
        .progress-fill {
          height: 100%;
          border-radius: 5px;
          transition: width 1s ease, background-color 1s ease;
        }
        
        /* Bomba de agua */
        .pump-animation {
          position: relative;
          height: 80px;
          width: 100%;
          margin: 15px 0;
          display: flex;
          justify-content: center;
          align-items: center;
        }
        
        .pump-icon {
          font-size: 40px;
          z-index: 2;
        }
        
        .water-flow {
          position: absolute;
          width: 60px;
          height: 60px;
          background: rgba(52, 152, 219, 0.3);
          border-radius: 50%;
          opacity: 0;
          transform: scale(0.5);
          transition: all 0.3s ease;
          z-index: 1;
        }
        
        .water-flow.active {
          opacity: 1;
          transform: scale(1);
          animation: pump 1s infinite;
        }
        
        @keyframes pump {
          0% { transform: scale(1); }
          50% { transform: scale(1.1); }
          100% { transform: scale(1); }
        }
        
        /* Modo autom√°tico */
        .automation-icon {
          height: 80px;
          width: 100%;
          display: flex;
          justify-content: center;
          align-items: center;
          margin: 15px 0;
          font-size: 40px;
        }
        
        .gear {
          transition: transform 0.5s ease;
        }
        
        .gear.spinning {
          animation: spin 3s infinite linear;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        /* Se√±al de conexi√≥n */
        .signal-animation {
          height: 80px;
          width: 100%;
          display: flex;
          justify-content: center;
          align-items: center;
          margin: 15px 0;
        }
        
        .signal {
          display: flex;
          align-items: flex-end;
          height: 30px;
          gap: 4px;
        }
        
        .signal span {
          width: 6px;
          background: #bdc3c7;
          border-radius: 3px;
        }
        
        .signal span:nth-child(1) { height: 10px; }
        .signal span:nth-child(2) { height: 15px; }
        .signal span:nth-child(3) { height: 20px; }
        
        .signal.active span {
          background: #2ecc71;
          animation: signal 1.5s infinite;
        }
        
        .signal.active span:nth-child(1) { animation-delay: 0.2s; }
        .signal.active span:nth-child(2) { animation-delay: 0.4s; }
        .signal.active span:nth-child(3) { animation-delay: 0.6s; }
        
        @keyframes signal {
          0%, 100% { opacity: 0.4; }
          50% { opacity: 1; }
        }
        
        /* Indicadores de estado */
        .status-indicator {
          display: inline-flex;
          align-items: center;
          gap: 8px;
          padding: 6px 12px;
          border-radius: 20px;
          font-size: 14px;
          font-weight: 600;
        }
        
        .status-on {
          background: rgba(46, 204, 113, 0.2);
          color: #27ae60;
        }
        
        .status-off {
          background: rgba(231, 76, 60, 0.2);
          color: #c0392b;
        }
        
        .status-dot {
          width: 10px;
          height: 10px;
          border-radius: 50%;
        }
        
        .status-on .status-dot {
          background: #27ae60;
        }
        
        .status-off .status-dot {
          background: #c0392b;
        }
        
        /* Informaci√≥n del sistema */
        .system-info {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
          gap: 15px;
        }
        
        .info-item {
          display: flex;
          justify-content: space-between;
          padding: 10px 0;
          border-bottom: 1px solid #ecf0f1;
        }
        
        .info-label {
          font-weight: 600;
          color: #7f8c8d;
        }
        
        .info-value {
          color: #2c3e50;
        }
        
        /* Formularios y botones */
        .control-section {
          margin-bottom: 30px;
        }
        
        .control-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 20px;
        }
        
        .control-group {
          background: white;
          padding: 20px;
          border-radius: 12px;
          box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .form-group {
          margin-bottom: 15px;
          
        }
        
        .form-label {
          display: block;
          margin-bottom: 5px;
          font-weight: 600;
          color: #2c3e50;
        }
        
        .form-input {
          color: #1d1e1fff;
          width: 100%;
          padding: 10px;
          border: 1px solid #92979bff;
          background: #fbfffcff;
          border-radius: 6px;
          font-size: 16px;
          transition: border-color 0.3s ease;
        }
        
        .form-input:focus {
          outline: none;
          border-color: #3498db;
          box-shadow: 0 0 0 2px rgba(202, 129, 20, 0.2);
        }
        
        .btn {
          padding: 10px 20px;
          border: none;
          border-radius: 6px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.3s ease;
          margin-right: 10px;
          margin-top: 10px;
        }
        
        .btn.success {
          background: #2ecc71;
          color: white;
        }
        
        .btn.success:hover {
          background: #27ae60;
        }
        
        .btn.danger {
          background: #e74c3c;
          color: white;
        }
        
        .btn.danger:hover {
          background: #c0392b;
        }
      `}</style>
    </div>
  );
};

export default Dashboard;